var hello = require("./testModule/hello");
可以根据相对路径来找到需要使用的模块


在浏览器里的全局对象是window,在node.js里的全局对象是global
process.version,process.platform,process.arch,process.cwd()
这些是常用的查看进程信息
要在下一次时间响应中执行代码可以调用process.nextTick();
判断js代码执行环境可以用typeof(window) === 'undefined'来判断;


var fs = require('fs');
fs.readFile('sample.txt','utf-8',function(err,data){});
这个文件必须是当前目录，回调函数接收两个参数，正常读取，err参数是null，data参数为读取到的String。错误时，data为undefined

fs.readFile('crfs.png',function(err,data){});
如果文件是二进制文件,不传入文件编码时,回调函数的data参数会返回一个Buffer对象。
data.toString('utf-8');
var buf = new Buffer(text,'utf-8');
可以把Buffer对象和String作转换
fs.readFileSync('sample.txt','utf-8');
fs还提供同步读取函数，不接收回调函数，函数直接返回结果

写文件通过fs.writeFile()来实现;
fs.writeFile('output.txt',data,function(err){});
fs.writeFileSync('output.txt',data);

fs.stat()会返回一个Stat对象，包含文件目录的详细信息
fs.stat("new.png",function(err,stat){if(err){}else{do something}})
isFile()可以判断是否是文件,isDirectory()是否是目录
stat.size文件大小stat.birthtime创建时间stat.mtime修改时间


数据流处理,下面是读取流
var rs = fs.createReadStream("sample.txt","utf-8");
rs.on('data',function(chunk){});data事件表示流的数据已经可以读取了
rs.on('end',function(){});end事件表示流已经到末尾,没有数据可以读取
rs.on('error',function(err){});error事件表示出错了
data事件可能会有多次,每次传递的chunk是流的一部分数据
要用流写入文件,需要不断调用write()方法,最后以end()结尾
var ws = fs.createWriteStream("output.txt","utf-8");
ws.write('sometext');
ws.write('end');
ws.end();写入数据时会把原来的数据全覆盖掉
读取数据的流继承自stream.Readable,写入的流都继承自stream.Writable

rs.pipe(ws);可以把两个流串起来
当Readable流的数据读取完毕,end事件触发后就会自动关闭Writable流,如果不希望关闭
rs.pipe(ws,{end:false});


http提供request和response对象 var http = require("http")
request对象封装了HTTP请求,可以拿到所有HTTP请求的信息；
response对象封装了HTTP响应,可以把HTTP响应返回给浏览器
var server = http.createServer(function(request,response){})
server.listen(8080);
request.method获取请求的方式request.url获取url
response.writeHead(200,{'Content-Type':'text/html'});
响应码和内容信息写入头部
response.end("<h1>over</h1>")可以将相应的HTML内容写入response
解析URL需要用到url模块,parse()可以将字符串解析为一个Url对象;
var url = require('url');
console.log(url.parse('http://www.baidu.com:8080/path/to?query=string#hash'));
path模块可以方便地构造目录
var workDir = path.resolve('.');解析当前目录
var filePath = path.join(workDir,'testModule','input.txt');组合完整的文件路径

crypto模块用来提供加密和哈希算法
var crpto = require('crypto');
hash.update("hello");
console.log(hash.digest('hex'));